{"version":3,"file":"listrak-B7gKJtKZ.js","sources":["../../../app/administration/src/component/data-api-test/data-api-test.html.twig","../../../app/administration/src/component/data-api-test/index.js","../../../app/administration/src/component/email-api-test/email-api-test.html.twig","../../../app/administration/src/component/email-api-test/index.js","../../../app/administration/src/constant/listrak-mail-send-action.constant.js","../../../app/administration/src/extension/sw-flow-sequence-action/index.js","../../../app/administration/src/service/validation.service.js","../../../app/administration/src/component/sw-flow-listrak-mail-send-modal/sw-flow-listrak-mail-send-modal.html.twig","../../../app/administration/src/component/sw-flow-listrak-mail-send-modal/index.js","../../../app/administration/src/service/data-api-test.service.js","../../../app/administration/src/service/email-api-test.service.js","../../../app/administration/src/main.js"],"sourcesContent":["<div>\n    <sw-button-process\n        :is-loading=\"isLoading\"\n        :process-success=\"isSaveSuccessful\"\n        @process-finish=\"saveFinish\"\n        @click=\"check\"\n    >\n        {{ $tc('dataApiTest.buttonLabel') }}\n    </sw-button-process>\n</div>","import template from './data-api-test.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('data-api-test', {\n    template,\n\n    props: ['label'],\n    inject: ['dataApiTest'],\n\n    mixins: [Mixin.getByName('notification')],\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n        };\n    },\n\n    computed: {\n        pluginConfig() {\n            let $parent = this.$parent;\n\n            while ($parent.actualConfigData === undefined) {\n                $parent = $parent.$parent;\n            }\n\n            const salesChannelId = $parent.currentSalesChannelId;\n\n            // Fallback: if no sales channel selected, use global.\n            return (\n                $parent.actualConfigData[salesChannelId] ||\n                $parent.actualConfigData.null\n            );\n        },\n    },\n\n    methods: {\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        check() {\n            this.isLoading = true;\n            this.dataApiTest\n                .check(this.pluginConfig)\n                .then(() => {\n                    this.isSaveSuccessful = true;\n                    this.createNotificationSuccess({\n                        title: this.$tc('dataApiTest.title'),\n                        message: this.$tc('dataApiTest.success'),\n                    });\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        title: this.$tc('dataApiTest.title'),\n                        message: this.$tc('dataApiTest.error'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n    },\n});\n","<div>\n    <sw-button-process\n        :is-loading=\"isLoading\"\n        :process-success=\"isSaveSuccessful\"\n        @process-finish=\"saveFinish\"\n        @click=\"check\"\n    >\n        {{ $tc('emailApiTest.buttonLabel') }}\n    </sw-button-process>\n</div>","import template from './email-api-test.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('email-api-test', {\n    template,\n\n    props: ['label'],\n    inject: ['emailApiTest'],\n\n    mixins: [Mixin.getByName('notification')],\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n        };\n    },\n\n    computed: {\n        pluginConfig() {\n            let $parent = this.$parent;\n\n            while ($parent.actualConfigData === undefined) {\n                $parent = $parent.$parent;\n            }\n\n            const salesChannelId = $parent.currentSalesChannelId;\n\n            // Fallback: if no sales channel selected, use global.\n            return (\n                $parent.actualConfigData[salesChannelId] ||\n                $parent.actualConfigData.null\n            );\n        },\n    },\n\n    methods: {\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        check() {\n            this.isLoading = true;\n\n            this.emailApiTest\n                .check(this.pluginConfig)\n                .then(() => {\n                    this.isSaveSuccessful = true;\n                    this.createNotificationSuccess({\n                        title: this.$tc('emailApiTest.title'),\n                        message: this.$tc('emailApiTest.success'),\n                    });\n                })\n                .catch(() => {\n                    this.createNotificationError({\n                        title: this.$tc('emailApiTest.title'),\n                        message: this.$tc('emailApiTest.error'),\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n    },\n});\n","export const ACTION = Object.freeze({\n    LISTRAK_MAIL_SEND: 'action.listrak.mail.send',\n});\n\nexport const GROUP = 'general';\n\nexport default {\n    ACTION,\n    GROUP,\n};\n","import {\n    ACTION,\n    GROUP,\n} from '../../constant/listrak-mail-send-action.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-flow-sequence-action', {\n    computed: {\n        modalName() {\n            if (this.selectedAction === ACTION.LISTRAK_MAIL_SEND) {\n                return 'sw-flow-listrak-mail-send-modal';\n            }\n\n            return this.$super('modalName');\n        },\n        actionDescription() {\n            const actionDescriptionList = this.$super('actionDescription');\n\n            return {\n                ...actionDescriptionList,\n                [ACTION.LISTRAK_MAIL_SEND]: (config) =>\n                    this.getListrakMailSendActionDescription(config),\n            };\n        },\n    },\n\n    methods: {\n        getListrakMailSendActionDescription(config) {\n            const recipient = config.recipient.type;\n            return this.$tc(\n                `Recipient: ${recipient.charAt(0).toUpperCase() + recipient.slice(1)}`\n            );\n        },\n\n        getActionTitle(actionName) {\n            if (actionName === ACTION.LISTRAK_MAIL_SEND) {\n                return {\n                    value: actionName,\n                    icon: 'regular-envelope',\n                    label: this.$tc('listrakMailSendAction.titleSendMail'),\n                    group: GROUP,\n                };\n            }\n\n            return this.$super('getActionTitle', actionName);\n        },\n    },\n});\n","const { types } = Shopware.Utils;\n\nexport default {\n    required,\n    regex,\n    email,\n};\n\n/**\n * Checks if a value is set based on its type.\n *\n * @memberOf module:core/service/validation\n * @param value\n * @returns {boolean}\n */\nexport function required(value) {\n    if (typeof value === 'string' && value.length <= 0) {\n        return false;\n    }\n\n    if (typeof value === 'boolean') {\n        return value === true;\n    }\n\n    if (types.isObject(value)) {\n        return Object.keys(value).length > 0;\n    }\n\n    return typeof value !== 'undefined' && value !== null;\n}\n\n/**\n * Checks the value against the given regular expression.\n *\n * @memberOf module:core/service/validation\n * @param value\n * @param expression\n * @returns {boolean}\n */\nexport function regex(value, expression) {\n    if (expression instanceof RegExp) {\n        return expression.test(value);\n    }\n\n    return new RegExp(expression).test(value);\n}\n\n/**\n * Checks if the value is a valid email address.\n *\n * @memberOf module:core/service/validation\n * @param value\n * @returns {boolean}\n */\nexport function email(value) {\n    const emailValidation =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return regex(value, emailValidation);\n}\n","{% block sw_flow_listrak_mail_send_modal %}\n    <sw-modal\n            class=\"sw-flow-listrak-mail-send-modal\"\n            :title=\"$tc('listrakMailSendAction.titleSendMail')\"\n            :closable=\"false\"\n            @modal-close=\"onClose\"\n    >\n        {% block sw_flow_mail_send_modal_recipient %}\n            <sw-single-select\n                    v-model:value=\"mailRecipient\"\n                    name=\"sw-field--mailRecipient\"\n                    class=\"sw-flow-listrak-mail-send-modal__recipient\"\n                    :options=\"recipientOptions\"\n                    :label=\"$tc('sw-flow.modals.mail.labelRecipient')\"\n                    :placeholder=\"$tc('sw-flow.modals.mail.placeholderRecipient')\"\n                    @update:value=\"onChangeRecipient\"\n            />\n        {% endblock %}\n        {% block sw_flow_mail_send_modal_recipient_emails_grid %}\n            <sw-data-grid\n                    v-if=\"showRecipientEmails\"\n                    ref=\"recipientsGrid\"\n                    class=\"sw-flow-listrak-mail-send-modal__recipient-grid\"\n                    :class=\"recipientGridError ? 'has--error' : ''\"\n                    :data-source=\"recipients\"\n                    :columns=\"recipientColumns\"\n                    :show-selection=\"false\"\n                    :plain-appearance=\"true\"\n                    @inline-edit-save=\"saveRecipient\"\n                    @inline-edit-cancel=\"cancelSaveRecipient\"\n            >\n                {% block sw_event_action_detail_recipients_grid_column_email %}\n                    <template #column-email=\"{ item, column, isInlineEdit, compact }\">\n                        <sw-text-field\n                                v-if=\"isInlineEdit\"\n                                v-model:value=\"item.email\"\n                                name=\"sw-field--item-email\"\n                                class=\"sw-flow-listrak-mail-send-modal__recipient-email\"\n                                :size=\"compact ? 'small' : 'default'\"\n                                :error=\"item.errorMail\"\n                                :placeholder=\"$tc('sw-flow.modals.mail.placeholderRecipientEmailAddress')\"\n                        />\n                        <template v-else>\n                            {{ item.email }}\n                        </template>\n                    </template>\n                {% endblock %}\n\n                {% block sw_event_action_detail_recipients_grid_column_name %}\n                    <template #column-name=\"{ item, column, isInlineEdit, compact }\">\n                        <sw-text-field\n                                v-if=\"isInlineEdit\"\n                                v-model:value=\"item.name\"\n                                name=\"sw-field--item-name\"\n                                class=\"sw-flow-listrak-mail-send-modal__recipient-name\"\n                                :size=\"compact ? 'small' : 'default'\"\n                                :error=\"item.errorName\"\n                                :placeholder=\"$tc('sw-flow.modals.mail.placeholderRecipientName')\"\n                        />\n                        <template v-else>\n                            {{ item.name }}\n                        </template>\n                    </template>\n                {% endblock %}\n                <template #actions=\"{ item, itemIndex }\">\n                    {% block sw_event_action_detail_recipients_grid_action_edit %}\n                        <sw-context-menu-item\n                                class=\"sw-flow-listrak-mail-send-modal__grid-action-edit\"\n                                @click=\"onEditRecipient(item)\"\n                        >\n                            {{ $tc('global.default.edit') }}\n                        </sw-context-menu-item>\n                    {% endblock %}\n\n                    {% block sw_event_action_detail_recipients_grid_action_delete %}\n                        <sw-context-menu-item\n                                class=\"sw-flow-listrak-mail-send-modal__grid-action-delete\"\n                                variant=\"danger\"\n                                :disabled=\"!allowDeleteRecipient(itemIndex)\"\n                                @click=\"onDeleteRecipient(itemIndex)\"\n                        >\n                            {{ $tc('global.default.delete') }}\n                        </sw-context-menu-item>\n                    {% endblock %}\n                </template>\n            </sw-data-grid>\n        {% endblock %}\n\n        {% block sw_flow_mail_send_modal_custom %}\n        {% endblock %}\n\n        {% block sw_flow_mail_send_modal_custom_modal %}\n            <sw-number-field\n                    class=\"sw-flow-listrak-mail-send-modal__transactional-message-id\"\n                    v-model:value=\"transactionalMessageId\"\n                    :label=\"$tc('listrakMailSendAction.transactionalMessageIdLabel')\"\n                    :help-text=\"$tc('listrakMailSendAction.transactionalMessageIdHelpText')\"\n                    :error=\"transactionalMessageIdError\"\n                    placeholder=\"11379312\"\n            />\n            <sw-data-grid\n                    ref=\"profileFieldsGrid\"\n                    class=\"sw-flow-listrak-mail-send-modal__profile-fields-grid\"\n                    :class=\"profileFieldsGridError ? 'has--error' : ''\"\n                    :data-source=\"profileFields\"\n                    :columns=\"profileFieldsColumns\"\n                    :show-selection=\"false\"\n                    :plain-appearance=\"true\"\n                    @inline-edit-save=\"saveProfileField\"\n                    @inline-edit-cancel=\"cancelSaveProfileField\"\n            >\n                <template #column-field-id=\"{ item, column, isInlineEdit, compact }\">\n                    <sw-number-field\n                            v-if=\"isInlineEdit\"\n                            v-model:value=\"item.fieldId\"\n                            class=\"sw-flow-listrak-mail-send-modal__profile-field-id\"\n                            :size=\"compact ? 'small' : 'default'\"\n                            :error=\"item.errorId\"\n                            placeholder=\"1205\"\n                    />\n                    <template v-else>\n                        {{ item.fieldId }}\n                    </template>\n                </template>\n\n                <template #column-field-value=\"{ item, column, isInlineEdit, compact }\">\n                    {% if context.feature.isActive('v6.7.0.0') %}\n                        <mt-textarea\n                                v-if=\"isInlineEdit\"\n                                v-model=\"item.fieldValue\"\n                                class=\"listrak-fixed-grid-textarea\"\n                                :size=\"compact ? 'small' : 'default'\"\n                                :error=\"item.errorValue\"\n                                :title=\"item.fieldValue\"\n                                placeholder=\"{{ customer.firstName }}\"\n                        />\n                    {% else %}\n                        <sw-textarea-field\n                                v-if=\"isInlineEdit\"\n                                v-model:value=\"item.fieldValue\"\n                                class=\"listrak-fixed-grid-textarea\"\n                                :size=\"compact ? 'small' : 'default'\"\n                                :error=\"item.errorValue\"\n                                :title=\"item.fieldValue\"\n                                placeholder=\"{{ customer.firstName }}\"\n                        />\n                    {% endif %}\n                    <template v-else>\n                        {{ item.fieldValue.length > 25 ? item.fieldValue.slice(0, 25) + '…' : item.fieldValue }}\n                    </template>\n                </template>\n\n                <template #actions=\"{ item, itemIndex }\">\n                    <sw-context-menu-item\n                            class=\"sw-flow-listrak-mail-send-modal__grid-action-edit\"\n                            @click=\"onEditProfileField(item)\"\n                    >\n                        {{ $tc('global.default.edit') }}\n                    </sw-context-menu-item>\n                    <sw-context-menu-item\n                            class=\"sw-flow-listrak-mail-send-modal__grid-action-delete\"\n                            variant=\"danger\"\n                            :disabled=\"!allowDeleteProfileField(itemIndex)\"\n                            @click=\"onDeleteProfileField(itemIndex)\"\n                    >\n                        {{ $tc('global.default.delete') }}\n                    </sw-context-menu-item>\n                </template>\n            </sw-data-grid>\n        {% endblock %}\n\n\n\n\n        {% block sw_flow_mail_send_modal_footer %}\n            <template #modal-footer>\n                {% block sw_flow_mail_send_modal_footer_cancel_button %}\n                    <sw-button\n                            class=\"sw-flow-listrak-mail-send-modal__cancel-button\"\n                            size=\"small\"\n                            @click=\"onClose\"\n                    >\n                        {{ $tc('global.default.cancel') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block sw_flow_mail_send_modal_footer_save_button %}\n                    <sw-button\n                            class=\"sw-flow-listrak-mail-send-modal__save-button\"\n                            variant=\"primary\"\n                            size=\"small\"\n                            @click=\"onAddAction\"\n                    >\n                        {{ sequence.id ? $tc('sw-flow.modals.buttonSaveAction') : $tc('sw-flow.modals.buttonAddAction') }}\n                    </sw-button>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}","import { email as emailValidation } from '../../service/validation.service';\nimport template from './sw-flow-listrak-mail-send-modal.html.twig';\nimport './sw-flow-listrak-mail-send-modal.scss';\n\nconst {\n    Component,\n    Utils,\n    Classes: { ShopwareError },\n} = Shopware;\nconst { mapState } = Component.getComponentHelper();\n\nComponent.register('sw-flow-listrak-mail-send-modal', {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    emits: ['modal-close', 'process-finish'],\n\n    props: {\n        sequence: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            showRecipientEmails: false,\n            mailRecipient: null,\n            recipients: [],\n            selectedRecipient: null,\n            selectedProfileField: null,\n            recipientGridError: null,\n            transactionalMessageId: null,\n            profileFields: [],\n            profileFieldsGridError: null,\n            transactionalMessageIdError: null,\n        };\n    },\n\n    computed: {\n        isNewMail() {\n            return !this.sequence?.id;\n        },\n\n        recipientCustomer() {\n            return [\n                {\n                    value: 'default',\n                    label: this.$tc('listrakMailSendAction.labelCustomer'),\n                },\n            ];\n        },\n\n        recipientAdmin() {\n            return [\n                {\n                    value: 'admin',\n                    label: this.$tc('listrakMailSendAction.labelAdmin'),\n                },\n            ];\n        },\n\n        recipientCustom() {\n            return [\n                {\n                    value: 'custom',\n                    label: this.$tc('listrakMailSendAction.labelCustom'),\n                },\n            ];\n        },\n\n        recipientDefault() {\n            return [\n                {\n                    value: 'default',\n                    label: this.$tc('listrakMailSendAction.labelDefault'),\n                },\n            ];\n        },\n\n        recipientContactFormMail() {\n            return [\n                {\n                    value: 'contactFormMail',\n                    label: this.$tc(\n                        'listrakMailSendAction.labelContactFormMail'\n                    ),\n                },\n            ];\n        },\n\n        entityAware() {\n            return [\n                'CustomerAware',\n                'UserAware',\n                'OrderAware',\n                'CustomerGroupAware',\n                'CartAware',\n            ];\n        },\n\n        recipientOptions() {\n            const allowedAwareOrigin = this.triggerEvent.aware ?? [];\n            const allowAwareConverted = [];\n            allowedAwareOrigin.forEach((aware) => {\n                aware = aware.slice(aware.lastIndexOf('\\\\') + 1);\n                const awareUpperCase =\n                    aware.charAt(0).toUpperCase() + aware.slice(1);\n                if (!allowAwareConverted.includes(awareUpperCase)) {\n                    allowAwareConverted.push(awareUpperCase);\n                }\n            });\n\n            if (allowAwareConverted.length === 0) {\n                return this.recipientCustom;\n            }\n\n            if (this.triggerEvent.name === 'contact_form.send') {\n                return [\n                    ...this.recipientDefault,\n                    ...this.recipientContactFormMail,\n                    ...this.recipientAdmin,\n                    ...this.recipientCustom,\n                ];\n            }\n            if (\n                [\n                    'newsletter.confirm',\n                    'newsletter.register',\n                    'newsletter.unsubscribe',\n                ].includes(this.triggerEvent.name)\n            ) {\n                return [\n                    ...this.recipientCustomer,\n                    ...this.recipientAdmin,\n                    ...this.recipientCustom,\n                ];\n            }\n\n            const hasEntityAware = allowAwareConverted.some((allowedAware) =>\n                this.entityAware.includes(allowedAware)\n            );\n\n            if (hasEntityAware) {\n                return [\n                    ...this.recipientCustomer,\n                    ...this.recipientAdmin,\n                    ...this.recipientCustom,\n                ];\n            }\n\n            return [...this.recipientAdmin, ...this.recipientCustom];\n        },\n\n        recipientColumns() {\n            return [\n                {\n                    property: 'email',\n                    label: 'listrakMailSendAction.columnRecipientMail',\n                    inlineEdit: 'string',\n                },\n                {\n                    property: 'name',\n                    label: 'listrakMailSendAction.columnRecipientName',\n                    inlineEdit: 'string',\n                },\n            ];\n        },\n\n        profileFieldsColumns() {\n            return [\n                {\n                    property: 'field-id',\n                    label: 'listrakMailSendAction.columnProfileFieldId',\n                    inlineEdit: 'number',\n                },\n                {\n                    property: 'field-value',\n                    label: 'listrakMailSendAction.columnProfileFieldValue',\n                    inlineEdit: 'string',\n                },\n            ];\n        },\n\n        replyToOptions() {\n            if (this.triggerEvent.name === 'contact_form.send') {\n                return [\n                    ...this.recipientDefault,\n                    ...this.recipientContactFormMail,\n                    ...this.recipientCustom,\n                ];\n            }\n\n            return [...this.recipientDefault, ...this.recipientCustom];\n        },\n\n        ...(Shopware.Feature.isActive('v6.7.0.0')\n                ? mapState(() => Shopware.Store.get('swFlow'), [\n                    'mailTemplates',\n                    'triggerEvent',\n                    'triggerActions',\n                ])\n                : mapState('swFlowState', [\n                    'mailTemplates',\n                    'triggerEvent',\n                    'triggerActions',\n                ])\n        ),\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.transactionalMessageId =\n                this.sequence?.config?.transactionalMessageId || null;\n            this.mailRecipient = this.recipientOptions[0].value;\n\n            if (!this.isNewMail) {\n                const { config } = this.sequence;\n\n                this.mailRecipient = config.recipient?.type;\n\n                if (config.recipient?.type === 'custom') {\n                    Object.entries(config.recipient.data).forEach(\n                        ([key, value]) => {\n                            const newId = Utils.createId();\n                            this.recipients.push({\n                                id: newId,\n                                email: key,\n                                name: value,\n                                isNew: false,\n                            });\n                        }\n                    );\n\n                    this.addRecipient();\n                    this.showRecipientEmails = true;\n                }\n                if (config?.profileFields) {\n                    Object.entries(config.profileFields).forEach(\n                        ([id, value]) => {\n                            const newId = Utils.createId();\n                            this.profileFields.push({\n                                id: newId,\n                                fieldId: id,\n                                fieldValue: value,\n                                isNew: false,\n                            });\n                        }\n                    );\n                }\n            }\n            this.addProfileField();\n        },\n\n        onClose() {\n            this.$emit('modal-close');\n        },\n\n        getRecipientData() {\n            const recipientData = {};\n            if (this.mailRecipient !== 'custom') {\n                return recipientData;\n            }\n\n            this.recipients.forEach((recipient) => {\n                if (!recipient.email && !recipient.name) {\n                    return;\n                }\n\n                Object.assign(recipientData, {\n                    [recipient.email]: recipient.name,\n                });\n            });\n            return recipientData;\n        },\n\n        getProfileFieldsData() {\n            const profileFieldsData = {};\n\n            this.profileFields.forEach((profileField) => {\n                if (!profileField.fieldId && !profileField.fieldValue) {\n                    return;\n                }\n\n                Object.assign(profileFieldsData, {\n                    [profileField.fieldId]: profileField.fieldValue,\n                });\n            });\n            return profileFieldsData;\n        },\n\n        isTransactionalMessageIdError() {\n            if (!this.transactionalMessageId) {\n                this.transactionalMessageIdError = new ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                });\n                return true;\n            }\n            const isNumeric = /^\\d+$/.test(this.transactionalMessageId);\n            if (!isNumeric) {\n                this.transactionalMessageIdError = new ShopwareError({\n                    code: 'INVALID_TRANSACTIONAL_MESSAGE_ID',\n                    detail: this.$tc(\n                        'listrakMailSendAction.transactionalMessageIdValueInvalid'\n                    ),\n                });\n                return true;\n            }\n            return false;\n        },\n\n        isRecipientGridError() {\n            if (this.mailRecipient !== 'custom') {\n                return false;\n            }\n\n            if (\n                this.recipients.length === 1 &&\n                !this.recipients[0].email &&\n                !this.recipients[0].name\n            ) {\n                this.validateRecipient(this.recipients[0], 0);\n                return true;\n            }\n\n            const invalidItemIndex = this.recipients\n                .filter((item) => !item.isNew)\n                .findIndex(\n                    (recipient) =>\n                        !recipient.name ||\n                        !recipient.email ||\n                        !emailValidation(recipient.email)\n                );\n\n            if (invalidItemIndex >= 0) {\n                this.validateRecipient(\n                    this.recipients[invalidItemIndex],\n                    invalidItemIndex\n                );\n            }\n\n            return invalidItemIndex >= 0;\n        },\n        isProfileFieldsGridError() {\n            if (\n                this.profileFields.length === 1 &&\n                !this.profileFields[0].fieldId &&\n                !this.profileFields[0].fieldValue\n            ) {\n                this.profileFields = [];\n                return false;\n            }\n\n            const invalidItemIndex = this.profileFields\n                .filter((item) => !item.isNew)\n                .findIndex(\n                    (profileField) =>\n                        !profileField.fieldId || !profileField.fieldValue\n                );\n\n            if (invalidItemIndex >= 0) {\n                this.validateProfileField(\n                    this.profileFields[invalidItemIndex],\n                    invalidItemIndex\n                );\n            }\n\n            return invalidItemIndex >= 0;\n        },\n\n        onAddAction() {\n            this.recipientGridError = this.isRecipientGridError();\n            this.profileFieldsGridError = this.isProfileFieldsGridError();\n            const transactionalMessageError =\n                this.isTransactionalMessageIdError();\n            if (\n                this.profileFieldsGridError ||\n                this.recipientGridError ||\n                transactionalMessageError\n            ) {\n                return;\n            }\n\n            this.resetError();\n\n            const sequence = {\n                ...this.sequence,\n                config: {\n                    transactionalMessageId: this.transactionalMessageId,\n                    recipient: {\n                        type: this.mailRecipient,\n                        data: this.getRecipientData(),\n                    },\n                    profileFields: this.getProfileFieldsData(),\n                },\n            };\n\n            this.$nextTick(() => {\n                this.$emit('process-finish', sequence);\n            });\n        },\n\n        onChangeRecipient(recipient) {\n            if (recipient === 'custom') {\n                this.showRecipientEmails = true;\n                this.addRecipient();\n            } else {\n                this.showRecipientEmails = false;\n            }\n        },\n\n        addRecipient() {\n            const newId = Utils.createId();\n\n            this.recipients.push({\n                id: newId,\n                email: '',\n                name: '',\n                isNew: true,\n            });\n\n            this.$nextTick().then(() => {\n                setTimeout(() => {\n                    const grid = this.$refs.recipientsGrid;\n                    if (grid) {\n                        grid.currentInlineEditId = newId;\n                        grid.enableInlineEdit();\n                    }\n                }, 100);\n            });\n        },\n        addProfileField() {\n            const newId = Utils.createId();\n            this.profileFields.push({\n                id: newId,\n                fieldId: '',\n                fieldValue: '',\n                isNew: true,\n            });\n            this.$nextTick().then(() => {\n                setTimeout(() => {\n                    const grid = this.$refs.profileFieldsGrid;\n                    if (grid) {\n                        grid.startInlineEdit = newId;\n                        grid.enableInlineEdit();\n                    }\n                }, 100);\n            });\n        },\n\n        saveRecipient(recipient) {\n            const index = this.recipients.findIndex((item) => {\n                return item.id === recipient.id;\n            });\n\n            if (this.validateRecipient(recipient, index)) {\n                this.$nextTick(() => {\n                    this.$refs.recipientsGrid.currentInlineEditId =\n                        recipient.id;\n                    this.$refs.recipientsGrid.enableInlineEdit();\n                });\n                return;\n            }\n\n            if (recipient.isNew) {\n                this.addRecipient();\n                this.recipients[index].isNew = false;\n            }\n\n            this.resetError();\n        },\n\n        saveProfileField(profileField) {\n            const index = this.profileFields.findIndex((item) => {\n                return item.id === profileField.id;\n            });\n            if (this.validateProfileField(profileField, index)) {\n                this.$nextTick().then(() => {\n                    const grid = this.$refs.profileFieldsGrid;\n                    if (grid) {\n                        grid.currentInlineEditId = profileField.id;\n                        grid.enableInlineEdit();\n                    }\n                });\n                return;\n            }\n\n            if (profileField.isNew) {\n                this.addProfileField();\n                this.profileFields[index].isNew = false;\n            }\n\n            this.resetError();\n        },\n        cancelSaveRecipient(recipient) {\n            if (!recipient.isNew) {\n                const index = this.recipients.findIndex((item) => {\n                    return item.id === this.selectedRecipient.id;\n                });\n\n                // Reset data when saving is cancelled\n                this.recipients[index] = this.selectedRecipient;\n            } else {\n                recipient.name = '';\n                recipient.email = '';\n            }\n\n            this.resetError();\n        },\n        cancelSaveProfileField(profileField) {\n            if (!profileField.isNew) {\n                const index = this.profileFields.findIndex((item) => {\n                    return item.id === this.selectedProfileField.id;\n                });\n\n                // Reset data when saving is cancelled\n                this.profileFields[index] = this.selectedProfileField;\n            } else {\n                profileField.fieldId = '';\n                profileField.fieldValue = '';\n            }\n\n            this.resetError();\n        },\n\n        onEditRecipient(item) {\n            const index = this.recipients.findIndex((recipient) => {\n                return item.id === recipient.id;\n            });\n\n            // Recheck error in current item\n            if (!item.name && !item.email) {\n                this.recipients[index] = { ...item, errorName: null };\n                this.recipients[index] = { ...item, errorMail: null };\n            } else {\n                this.validateRecipient(item, index);\n            }\n\n            this.$refs.recipientsGrid.currentInlineEditId = item.id;\n            this.$refs.recipientsGrid.enableInlineEdit();\n            this.selectedRecipient = { ...item };\n        },\n\n        onDeleteRecipient(itemIndex) {\n            this.recipients.splice(itemIndex, 1);\n        },\n\n        onEditProfileField(item) {\n            const index = this.profileFields.findIndex((profileField) => {\n                return item.id === profileField.id;\n            });\n\n            // Recheck error in current item\n            if (!item.fieldId && !item.fieldValue) {\n\n                this.profileFields[index] = { ...item, errorId: null };\n                this.profileFields[index] = { ...item, errorValue: null };\n            } else {\n                this.validateProfileField(item, index);\n            }\n\n            this.$refs.profileFieldsGrid.currentInlineEditId = item.id;\n            this.$refs.profileFieldsGrid.enableInlineEdit();\n            this.selectedProfileField = { ...item };\n        },\n\n        onDeleteProfileField(itemIndex) {\n            this.profileFields.splice(itemIndex, 1);\n        },\n\n        setNameError(name) {\n            const error = !name\n                ? new ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                })\n                : null;\n\n            return error;\n        },\n\n        setMailError(mail) {\n            let error = null;\n\n            if (!mail) {\n                error = new ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                });\n            }\n\n            if (!emailValidation(mail)) {\n                error = new ShopwareError({\n                    code: 'INVALID_MAIL',\n                });\n            }\n\n            return error;\n        },\n        setIdError(id) {\n            let error = null;\n\n            if (!id) {\n                error = new ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                });\n            }\n            const isNumeric = /^\\d+$/.test(id);\n            if (!isNumeric) {\n                error = new ShopwareError({\n                    code: 'INVALID_PROFILE_FIELD_ID',\n                    detail: this.$tc(\n                        'listrakMailSendAction.profileFieldIdValueInvalid'\n                    ),\n                });\n            }\n\n            return error;\n        },\n        setValueError(value) {\n            let error = null;\n\n            if (!value) {\n                error = new ShopwareError({\n                    code: 'c1051bb4-d103-4f74-8988-acbcafc7fdc3',\n                });\n            }\n\n            return error;\n        },\n        validateRecipient(item, itemIndex) {\n            const errorName = this.setNameError(item.name);\n            const errorMail = this.setMailError(item.email);\n\n\n            this.recipients[itemIndex] = {\n                ...item,\n                errorName,\n                errorMail,\n            };\n\n            return errorName || errorMail;\n        },\n\n        validateProfileField(item, itemIndex) {\n            const errorId = this.setIdError(item.fieldId);\n            const errorValue = this.setValueError(item.fieldValue);\n\n\n            this.profileFields[itemIndex] = {\n                ...item,\n                errorId,\n                errorValue,\n            };\n\n            return errorId || errorValue;\n        },\n\n        resetError() {\n            this.recipientGridError = null;\n            this.recipients.forEach((item) => {\n                item.errorName = null;\n                item.errorMail = null;\n            });\n            this.profileFieldsGridError = null;\n            this.profileFields.forEach((item) => {\n                item.errorId = null;\n                item.errorValue = null;\n            });\n            this.transactionalMessageIdError = null;\n        },\n\n        allowDeleteRecipient(itemIndex) {\n            return itemIndex !== this.recipients.length - 1;\n        },\n        allowDeleteProfileField(itemIndex) {\n            return itemIndex !== this.profileFields.length - 1;\n        },\n    },\n});","const ApiService = Shopware.Classes.ApiService;\n\nexport default class DataApiTestService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'listrak/data-api') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    check(values) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(`_action/${this.getApiBasePath()}/test`, values, {\n                headers,\n            })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n","const ApiService = Shopware.Classes.ApiService;\n\nexport default class EmailApiTestService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'listrak/email-api') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    check(values) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(`_action/${this.getApiBasePath()}/test`, values, {\n                headers,\n            })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n","import './component/data-api-test';\nimport './component/email-api-test';\nimport './extension/sw-flow-sequence-action';\nimport './component/sw-flow-listrak-mail-send-modal';\n\nimport DataApiTestService from './service/data-api-test.service';\nimport EmailApiTestService from './service/email-api-test.service';\n\nShopware.Service().register('dataApiTest', () => {\n    return new DataApiTestService(\n        Shopware.Application.getContainer('init').httpClient,\n        Shopware.Service('loginService')\n    );\n});\n\nShopware.Service().register('emailApiTest', () => {\n    return new EmailApiTestService(\n        Shopware.Application.getContainer('init').httpClient,\n        Shopware.Service('loginService')\n    );\n});\n\nimport deDE from './snippet/de-DE.json';\nimport enGB from './snippet/en-GB.json';\n\nShopware.Locale.extend('de-DE', deDE);\nShopware.Locale.extend('en-GB', enGB);\n"],"names":["template$2","Component","Mixin","template","$parent","salesChannelId","template$1","ACTION","GROUP","config","recipient","actionName","types","regex","value","expression","email","Utils","ShopwareError","mapState","_a","allowedAwareOrigin","allowAwareConverted","aware","awareUpperCase","allowedAware","_b","_c","_d","key","newId","id","recipientData","profileFieldsData","profileField","invalidItemIndex","item","emailValidation","transactionalMessageError","sequence","grid","index","itemIndex","name","mail","error","errorName","errorMail","errorId","errorValue","ApiService","DataApiTestService","httpClient","loginService","apiEndpoint","values","headers","response","EmailApiTestService","deDE","enGB"],"mappings":"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"}