!function(){var e={620:function(){},884:function(){},419:function(e,t,i){var n=i(620);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),(0,i(534).A)("46316718",n,!0,{})},385:function(e,t,i){var n=i(884);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals),(0,i(534).A)("3379ed8d",n,!0,{})},534:function(e,t,i){"use strict";function n(e,t){for(var i=[],n={},l=0;l<t.length;l++){var s=t[l],r=s[0],a={id:e+":"+l,css:s[1],media:s[2],sourceMap:s[3]};n[r]?n[r].parts.push(a):i.push(n[r]={id:r,parts:[a]})}return i}i.d(t,{A:function(){return f}});var l,s="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!s)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var r={},a=s&&(document.head||document.getElementsByTagName("head")[0]),o=null,c=0,d=!1,p=function(){},u=null,m="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function f(e,t,i,l){d=i,u=l||{};var s=n(e,t);return g(s),function(t){for(var i=[],l=0;l<s.length;l++){var a=r[s[l].id];a.refs--,i.push(a)}t?g(s=n(e,t)):s=[];for(var l=0;l<i.length;l++){var a=i[l];if(0===a.refs){for(var o=0;o<a.parts.length;o++)a.parts[o]();delete r[a.id]}}}}function g(e){for(var t=0;t<e.length;t++){var i=e[t],n=r[i.id];if(n){n.refs++;for(var l=0;l<n.parts.length;l++)n.parts[l](i.parts[l]);for(;l<i.parts.length;l++)n.parts.push(b(i.parts[l]));n.parts.length>i.parts.length&&(n.parts.length=i.parts.length)}else{for(var s=[],l=0;l<i.parts.length;l++)s.push(b(i.parts[l]));r[i.id]={id:i.id,refs:1,parts:s}}}}function w(){var e=document.createElement("style");return e.type="text/css",a.appendChild(e),e}function b(e){var t,i,n=document.querySelector("style["+m+'~="'+e.id+'"]');if(n){if(d)return p;n.parentNode.removeChild(n)}if(h){var l=c++;t=v.bind(null,n=o||(o=w()),l,!1),i=v.bind(null,n,l,!0)}else t=I.bind(null,n=w()),i=function(){n.parentNode.removeChild(n)};return t(e),function(n){n?(n.css!==e.css||n.media!==e.media||n.sourceMap!==e.sourceMap)&&t(e=n):i()}}var S=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function v(e,t,i,n){var l=i?"":n.css;if(e.styleSheet)e.styleSheet.cssText=S(t,l);else{var s=document.createTextNode(l),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function I(e,t){var i=t.css,n=t.media,l=t.sourceMap;if(n&&e.setAttribute("media",n),u.ssrId&&e.setAttribute(m,t.id),l&&(i+="\n/*# sourceURL="+l.sources[0]+" */",i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}}},t={};function i(n){var l=t[n];if(void 0!==l)return l.exports;var s=t[n]={id:n,exports:{}};return e[n](s,s.exports,i),s.exports}i.d=function(e,t){for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="bundles/listrak/",window?.__sw__?.assetPath&&(i.p=window.__sw__.assetPath+"/bundles/listrak/"),function(){"use strict";i(419);let{Component:e,Mixin:t}=Shopware;e.register("full-customer-sync",{template:'<template>\n    <div class="listrak-process-button">\n        <sw-button-process\n            :is-loading="isLoading"\n            :process-success="isImportSuccessful"\n            @process-finish="importFinish"\n            @click="importCustomers"\n        >\n            {{ $tc(\'fullCustomerSyncButton.buttonLabel\') }}\n        </sw-button-process>\n    </div>\n</template>',props:["label"],inject:["fullCustomerSync"],mixins:[t.getByName("notification")],data(){return{isLoading:!1,isImportSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;return e.actualConfigData.null}},methods:{importFinish(){this.isImportSuccessful=!1},importCustomers(){this.isLoading=!0,this.fullCustomerSync.importCustomers().then(e=>{e.success?(this.isImportSuccessful=!0,this.createNotificationSuccess({title:this.$tc("fullCustomerSyncButton.title"),message:this.$tc("fullCustomerSyncButton.success")})):this.createNotificationError({title:this.$tc("fullCustomerSyncButton.title"),message:this.$tc("fullCustomerSyncButton.error")}),this.isLoading=!1})}}});let{Component:n,Mixin:l}=Shopware;n.register("full-order-sync",{template:'<template>\n    <div class="listrak-process-button">\n        <sw-button-process\n            :is-loading="isLoading"\n            :process-success="isImportSuccessful"\n            @process-finish="importFinish"\n            @click="importOrders"\n        >\n            {{ $tc(\'fullOrderSyncButton.buttonLabel\') }}\n        </sw-button-process>\n    </div>\n</template>',props:["label"],inject:["fullOrderSync"],mixins:[l.getByName("notification")],data(){return{isLoading:!1,isImportSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;return e.actualConfigData.null}},methods:{importFinish(){this.isImportSuccessful=!1},importOrders(){this.isLoading=!0,this.fullOrderSync.importOrders().then(e=>{e.success?(this.isImportSuccessful=!0,this.createNotificationSuccess({title:this.$tc("fullOrderSyncButton.title"),message:this.$tc("fullOrderSyncButton.success")})):this.createNotificationError({title:this.$tc("fullOrderSyncButton.title"),message:this.$tc("fullOrderSyncButton.error")}),this.isLoading=!1})}}});let{Component:s,Mixin:r}=Shopware;s.register("full-newsletter-recipient-sync",{template:'<template>\n    <div class="listrak-process-button">\n        <sw-button-process\n            :is-loading="isLoading"\n            :process-success="isImportSuccessful"\n            @process-finish="importFinish"\n            @click="importNewsletterRecipients"\n        >\n            {{ $tc(\'fullNewsletterRecipientSyncButton.buttonLabel\') }}\n        </sw-button-process>\n    </div>\n</template>',props:["label"],inject:["fullNewsletterRecipientSync"],mixins:[r.getByName("notification")],data(){return{isLoading:!1,isImportSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;return e.actualConfigData.null}},methods:{importFinish(){this.isImportSuccessful=!1},importNewsletterRecipients(){this.isLoading=!0,this.fullNewsletterRecipientSync.importNewsletterRecipients().then(e=>{e.success?(this.isImportSuccessful=!0,this.createNotificationSuccess({title:this.$tc("fullNewsletterRecipientSyncButton.title"),message:this.$tc("fullNewsletterRecipientSyncButton.success")})):this.createNotificationError({title:this.$tc("fullNewsletterRecipientSyncButton.title"),message:this.$tc("fullNewsletterRecipientSyncButton.error")}),this.isLoading=!1})}}});let{Component:a,Mixin:o}=Shopware;a.register("data-api-test",{template:'<div>\n    <sw-button-process\n        :is-loading="isLoading"\n        :process-success="isSaveSuccessful"\n        @process-finish="saveFinish"\n        @click="check"\n    >\n        {{ $tc(\'dataApiTest.buttonLabel\') }}\n    </sw-button-process>\n</div>',props:["label"],inject:["dataApiTest"],mixins:[o.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;return e.actualConfigData.null}},methods:{saveFinish(){this.isSaveSuccessful=!1},check(){this.isLoading=!0,this.dataApiTest.check(this.pluginConfig).then(()=>{this.isSaveSuccessful=!0,this.createNotificationSuccess({title:this.$tc("dataApiTest.title"),message:this.$tc("dataApiTest.success")})}).catch(()=>{this.createNotificationError({title:this.$tc("dataApiTest.title"),message:this.$tc("dataApiTest.error")})}).finally(()=>{this.isLoading=!1})}}});let{Component:c,Mixin:d}=Shopware;c.register("email-api-test",{template:'<div>\n    <sw-button-process\n        :is-loading="isLoading"\n        :process-success="isSaveSuccessful"\n        @process-finish="saveFinish"\n        @click="check"\n    >\n        {{ $tc(\'emailApiTest.buttonLabel\') }}\n    </sw-button-process>\n</div>',props:["label"],inject:["emailApiTest"],mixins:[d.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;return e.actualConfigData.null}},methods:{saveFinish(){this.isSaveSuccessful=!1},check(){this.isLoading=!0,this.emailApiTest.check(this.pluginConfig).then(()=>{this.isSaveSuccessful=!0,this.createNotificationSuccess({title:this.$tc("emailApiTest.title"),message:this.$tc("emailApiTest.success")})}).catch(()=>{this.createNotificationError({title:this.$tc("emailApiTest.title"),message:this.$tc("emailApiTest.error")})}).finally(()=>{this.isLoading=!1})}}});let p=Object.freeze({LISTRAK_MAIL_SEND:"action.listrak.mail.send"}),{Component:u}=Shopware;u.override("sw-flow-sequence-action",{computed:{modalName(){return this.selectedAction===p.LISTRAK_MAIL_SEND?"sw-flow-listrak-mail-send-modal":this.$super("modalName")},actionDescription(){return{...this.$super("actionDescription"),[p.LISTRAK_MAIL_SEND]:e=>this.getListrakMailSendActionDescription(e)}}},methods:{getListrakMailSendActionDescription(e){let t=e.recipient.type;return this.$tc(`Recipient: ${t.charAt(0).toUpperCase()+t.slice(1)}`)},getActionTitle(e){return e===p.LISTRAK_MAIL_SEND?{value:e,icon:"regular-envelope",label:this.$tc("listrakMailSendAction.titleSendMail"),group:"general"}:this.$super("getActionTitle",e)}}});let{types:m}=Shopware.Utils;function h(e){var t;return(t=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)instanceof RegExp?t.test(e):new RegExp(t).test(e)}i(385);let{Component:f,Utils:g,Classes:{ShopwareError:w}}=Shopware,{Criteria:b}=Shopware.Data,{mapState:S}=f.getComponentHelper();f.register("sw-flow-listrak-mail-send-modal",{template:'{% block sw_flow_listrak_mail_send_modal %}\n    <sw-modal\n        class="sw-flow-listrak-mail-send-modal"\n        :title="$tc(\'listrakMailSendAction.titleSendMail\')"\n        :closable="false"\n        @modal-close="onClose"\n    >\n        {% block sw_flow_mail_send_modal_recipient %}\n        <sw-single-select\n            v-model:value="mailRecipient"\n            name="sw-field--mailRecipient"\n            class="sw-flow-listrak-mail-send-modal__recipient"\n            :options="recipientOptions"\n            :label="$tc(\'sw-flow.modals.mail.labelRecipient\')"\n            :placeholder="$tc(\'sw-flow.modals.mail.placeholderRecipient\')"\n            @update:value="onChangeRecipient"\n        />\n        {% endblock %}\n        {% block sw_flow_mail_send_modal_recipient_emails_grid %}\n        <sw-data-grid\n            v-if="showRecipientEmails"\n            ref="recipientsGrid"\n            class="sw-flow-listrak-mail-send-modal__recipient-grid"\n            :class="recipientGridError ? \'has--error\' : \'\'"\n            :data-source="recipients"\n            :columns="recipientColumns"\n            :show-selection="false"\n            :plain-appearance="true"\n            @inline-edit-save="saveRecipient"\n            @inline-edit-cancel="cancelSaveRecipient"\n        >\n            {% block sw_event_action_detail_recipients_grid_column_email %}\n            <template #column-email="{ item, column, isInlineEdit, compact }">\n                <sw-text-field\n                    v-if="isInlineEdit"\n                    v-model:value="item.email"\n                    name="sw-field--item-email"\n                    class="sw-flow-listrak-mail-send-modal__recipient-email"\n                    :size="compact ? \'small\' : \'default\'"\n                    :error="item.errorMail"\n                    :placeholder="$tc(\'sw-flow.modals.mail.placeholderRecipientEmailAddress\')"\n                />\n                <template v-else>\n                            {{ item.email }}\n                        </template>\n            </template>\n            {% endblock %}\n\n                {% block sw_event_action_detail_recipients_grid_column_name %}\n            <template #column-name="{ item, column, isInlineEdit, compact }">\n                <sw-text-field\n                    v-if="isInlineEdit"\n                    v-model:value="item.name"\n                    name="sw-field--item-name"\n                    class="sw-flow-listrak-mail-send-modal__recipient-name"\n                    :size="compact ? \'small\' : \'default\'"\n                    :error="item.errorName"\n                    :placeholder="$tc(\'sw-flow.modals.mail.placeholderRecipientName\')"\n                />\n                <template v-else>\n                            {{ item.name }}\n                        </template>\n            </template>\n            {% endblock %}\n            <template #actions="{ item, itemIndex }">\n                {% block sw_event_action_detail_recipients_grid_action_edit %}\n                <sw-context-menu-item\n                    class="sw-flow-listrak-mail-send-modal__grid-action-edit"\n                    @click="onEditRecipient(item)"\n                >\n                    {{ $tc(\'global.default.edit\') }}\n                </sw-context-menu-item>\n                {% endblock %}\n\n                    {% block sw_event_action_detail_recipients_grid_action_delete %}\n                <sw-context-menu-item\n                    class="sw-flow-listrak-mail-send-modal__grid-action-delete"\n                    variant="danger"\n                    :disabled="!allowDeleteRecipient(itemIndex)"\n                    @click="onDeleteRecipient(itemIndex)"\n                >\n                    {{ $tc(\'global.default.delete\') }}\n                </sw-context-menu-item>\n                {% endblock %}\n            </template>\n        </sw-data-grid>\n        {% endblock %}\n\n        {% block sw_flow_mail_send_modal_custom %}\n        {% endblock %}\n\n        {% block sw_flow_mail_send_modal_custom_modal %}\n        <sw-number-field\n            class="sw-flow-listrak-mail-send-modal__transactional-message-id"\n            v-model:value="transactionalMessageId"\n            :label="$tc(\'listrakMailSendAction.transactionalMessageIdLabel\')"\n            :help-text="$tc(\'listrakMailSendAction.transactionalMessageIdHelpText\')"\n            :error="transactionalMessageIdError"\n            placeholder="11379312"\n        />\n        <sw-data-grid\n            ref="profileFieldsGrid"\n            class="sw-flow-listrak-mail-send-modal__profile-fields-grid"\n            :class="profileFieldsGridError ? \'has--error\' : \'\'"\n            :data-source="profileFields"\n            :columns="profileFieldsColumns"\n            :show-selection="false"\n            :plain-appearance="true"\n            @inline-edit-save="saveProfileField"\n            @inline-edit-cancel="cancelSaveProfileField"\n        >\n            <template #column-field-id="{ item, column, isInlineEdit, compact }">\n                <sw-number-field\n                    v-if="isInlineEdit"\n                    v-model:value="item.fieldId"\n                    class="sw-flow-listrak-mail-send-modal__profile-field-id"\n                    :size="compact ? \'small\' : \'default\'"\n                    :error="item.errorId"\n                    placeholder="1205"\n                />\n                <template v-else>\n                        {{ item.fieldId }}\n                    </template>\n            </template>\n\n            <template #column-field-value="{ item, column, isInlineEdit, compact }">\n                <sw-textarea-field\n                    v-if="isInlineEdit"\n                    v-model:value="item.fieldValue"\n                    class="listrak-fixed-grid-textarea"\n                    :size="compact ? \'small\' : \'default\'"\n                    :error="item.errorValue"\n                    :title="item.fieldValue"\n                    placeholder="{{ customer.firstName }}"\n                />\n                <template v-else>\n                    {{ item.fieldValue.length > 25 ? item.fieldValue.slice(0, 25) + \'…\' : item.fieldValue }}\n                </template>\n            </template>\n\n            <template #actions="{ item, itemIndex }">\n                <sw-context-menu-item\n                    class="sw-flow-listrak-mail-send-modal__grid-action-edit"\n                    @click="onEditProfileField(item)"\n                >\n                    {{ $tc(\'global.default.edit\') }}\n                </sw-context-menu-item>\n                <sw-context-menu-item\n                    class="sw-flow-listrak-mail-send-modal__grid-action-delete"\n                    variant="danger"\n                    :disabled="!allowDeleteProfileField(itemIndex)"\n                    @click="onDeleteProfileField(itemIndex)"\n                >\n                    {{ $tc(\'global.default.delete\') }}\n                </sw-context-menu-item>\n            </template>\n        </sw-data-grid>\n        {% endblock %}\n\n\n\n\n        {% block sw_flow_mail_send_modal_footer %}\n        <template #modal-footer>\n            {% block sw_flow_mail_send_modal_footer_cancel_button %}\n            <sw-button\n                class="sw-flow-listrak-mail-send-modal__cancel-button"\n                size="small"\n                @click="onClose"\n            >\n                {{ $tc(\'global.default.cancel\') }}\n            </sw-button>\n            {% endblock %}\n\n                {% block sw_flow_mail_send_modal_footer_save_button %}\n            <sw-button\n                class="sw-flow-listrak-mail-send-modal__save-button"\n                variant="primary"\n                size="small"\n                @click="onAddAction"\n            >\n                {{ sequence.id ? $tc(\'sw-flow.modals.buttonSaveAction\') : $tc(\'sw-flow.modals.buttonAddAction\') }}\n            </sw-button>\n            {% endblock %}\n        </template>\n        {% endblock %}\n    </sw-modal>\n{% endblock %}',inject:["repositoryFactory"],emits:["modal-close","process-finish"],props:{sequence:{type:Object,required:!0}},data(){return{showRecipientEmails:!1,mailRecipient:null,recipients:[],selectedRecipient:null,selectedProfileField:null,recipientGridError:null,transactionalMessageId:null,profileFields:[],profileFieldsGridError:null,transactionalMessageIdError:null}},computed:{isNewMail(){return!this.sequence?.id},recipientCustomer(){return[{value:"default",label:this.$tc("listrakMailSendAction.labelCustomer")}]},recipientAdmin(){return[{value:"admin",label:this.$tc("listrakMailSendAction.labelAdmin")}]},recipientCustom(){return[{value:"custom",label:this.$tc("listrakMailSendAction.labelCustom")}]},recipientDefault(){return[{value:"default",label:this.$tc("listrakMailSendAction.labelDefault")}]},recipientContactFormMail(){return[{value:"contactFormMail",label:this.$tc("listrakMailSendAction.labelContactFormMail")}]},entityAware(){return["CustomerAware","UserAware","OrderAware","CustomerGroupAware","CartAware"]},recipientOptions(){let e=this.triggerEvent.aware??[],t=[];return(e.forEach(e=>{let i=(e=e.slice(e.lastIndexOf("\\")+1)).charAt(0).toUpperCase()+e.slice(1);t.includes(i)||t.push(i)}),0===t.length)?this.recipientCustom:"contact_form.send"===this.triggerEvent.name?[...this.recipientDefault,...this.recipientContactFormMail,...this.recipientAdmin,...this.recipientCustom]:["newsletter.confirm","newsletter.register","newsletter.unsubscribe"].includes(this.triggerEvent.name)||t.some(e=>this.entityAware.includes(e))?[...this.recipientCustomer,...this.recipientAdmin,...this.recipientCustom]:[...this.recipientAdmin,...this.recipientCustom]},recipientColumns(){return[{property:"email",label:"listrakMailSendAction.columnRecipientMail",inlineEdit:"string"},{property:"name",label:"listrakMailSendAction.columnRecipientName",inlineEdit:"string"}]},profileFieldsColumns(){return[{property:"field-id",label:"listrakMailSendAction.columnProfileFieldId",inlineEdit:"number"},{property:"field-value",label:"listrakMailSendAction.columnProfileFieldValue",inlineEdit:"string"}]},replyToOptions(){return"contact_form.send"===this.triggerEvent.name?[...this.recipientDefault,...this.recipientContactFormMail,...this.recipientCustom]:[...this.recipientDefault,...this.recipientCustom]},...S("swFlowState",["mailTemplates","triggerEvent","triggerActions"])},created(){this.createdComponent()},methods:{createdComponent(){if(this.transactionalMessageId=this.sequence?.config?.transactionalMessageId||null,this.mailRecipient=this.recipientOptions[0].value,!this.isNewMail){let{config:e}=this.sequence;this.mailRecipient=e.recipient?.type,e.recipient?.type==="custom"&&(Object.entries(e.recipient.data).forEach(([e,t])=>{let i=g.createId();this.recipients.push({id:i,email:e,name:t,isNew:!1})}),this.addRecipient(),this.showRecipientEmails=!0),e?.profileFields&&Object.entries(e.profileFields).forEach(([e,t])=>{let i=g.createId();this.profileFields.push({id:i,fieldId:e,fieldValue:t,isNew:!1})})}this.addProfileField()},onClose(){this.$emit("modal-close")},getRecipientData(){let e={};return"custom"!==this.mailRecipient||this.recipients.forEach(t=>{(t.email||t.name)&&Object.assign(e,{[t.email]:t.name})}),e},getProfileFieldsData(){let e={};return this.profileFields.forEach(t=>{(t.fieldId||t.fieldValue)&&Object.assign(e,{[t.fieldId]:t.fieldValue})}),e},isTransactionalMessageIdError(){return this.transactionalMessageId?(console.log(this.transactionalMessageId),!/^\d+$/.test(this.transactionalMessageId)&&(this.transactionalMessageIdError=new w({code:"INVALID_TRANSACTIONAL_MESSAGE_ID",detail:this.$tc("listrakMailSendAction.transactionalMessageIdValueInvalid")}),!0)):(this.transactionalMessageIdError=new w({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"}),!0)},isRecipientGridError(){if("custom"!==this.mailRecipient)return!1;if(1===this.recipients.length&&!this.recipients[0].email&&!this.recipients[0].name)return this.validateRecipient(this.recipients[0],0),!0;let e=this.recipients.filter(e=>!e.isNew).findIndex(e=>!e.name||!e.email||!h(e.email));return e>=0&&this.validateRecipient(this.recipients[e],e),e>=0},isProfileFieldsGridError(){if(1===this.profileFields.length&&!this.profileFields[0].fieldId&&!this.profileFields[0].fieldValue)return this.profileFields=[],!1;let e=this.profileFields.filter(e=>!e.isNew).findIndex(e=>!e.fieldId||!e.fieldValue);return e>=0&&this.validateProfileField(this.profileFields[e],e),e>=0},onAddAction(){this.recipientGridError=this.isRecipientGridError(),this.profileFieldsGridError=this.isProfileFieldsGridError();let e=this.isTransactionalMessageIdError();if(this.profileFieldsGridError||this.recipientGridError||e)return;this.resetError();let t={...this.sequence,config:{transactionalMessageId:this.transactionalMessageId,recipient:{type:this.mailRecipient,data:this.getRecipientData()},profileFields:this.getProfileFieldsData()}};this.$nextTick(()=>{this.$emit("process-finish",t)})},onChangeRecipient(e){"custom"===e?(this.showRecipientEmails=!0,this.addRecipient()):this.showRecipientEmails=!1},addRecipient(){let e=g.createId();this.recipients.push({id:e,email:"",name:"",isNew:!0}),this.$nextTick().then(()=>{setTimeout(()=>{let t=this.$refs.recipientsGrid;t&&(t.currentInlineEditId=e,t.enableInlineEdit())},100)})},addProfileField(){let e=g.createId();this.profileFields.push({id:e,fieldId:"",fieldValue:"",isNew:!0}),this.$nextTick().then(()=>{setTimeout(()=>{let t=this.$refs.profileFieldsGrid;t&&(t.startInlineEdit=e,t.enableInlineEdit())},100)})},saveRecipient(e){let t=this.recipients.findIndex(t=>t.id===e.id);if(this.validateRecipient(e,t)){this.$nextTick(()=>{this.$refs.recipientsGrid.currentInlineEditId=e.id,this.$refs.recipientsGrid.enableInlineEdit()});return}e.isNew&&(this.addRecipient(),this.recipients[t].isNew=!1),this.resetError()},saveProfileField(e){let t=this.profileFields.findIndex(t=>t.id===e.id);if(this.validateProfileField(e,t)){this.$nextTick().then(()=>{let t=this.$refs.profileFieldsGrid;t&&(t.currentInlineEditId=e.id,t.enableInlineEdit())});return}e.isNew&&(this.addProfileField(),this.profileFields[t].isNew=!1),this.resetError()},cancelSaveRecipient(e){if(e.isNew)e.name="",e.email="";else{let e=this.recipients.findIndex(e=>e.id===this.selectedRecipient.id);this.recipients[e]=this.selectedRecipient}this.resetError()},cancelSaveProfileField(e){if(e.isNew)e.fieldId="",e.fieldValue="";else{let e=this.profileFields.findIndex(e=>e.id===this.selectedProfileField.id);this.profileFields[e]=this.selectedProfileField}this.resetError()},onEditRecipient(e){let t=this.recipients.findIndex(t=>e.id===t.id);e.name||e.email?this.validateRecipient(e,t):this.isCompatEnabled("INSTANCE_SET")?(this.$set(this.recipients,t,{...e,errorName:null}),this.$set(this.recipients,t,{...e,errorMail:null})):(this.recipients[t]={...e,errorName:null},this.recipients[t]={...e,errorMail:null}),this.$refs.recipientsGrid.currentInlineEditId=e.id,this.$refs.recipientsGrid.enableInlineEdit(),this.selectedRecipient={...e}},onDeleteRecipient(e){this.recipients.splice(e,1)},onEditProfileField(e){let t=this.profileFields.findIndex(t=>e.id===t.id);e.fieldId||e.fieldValue?this.validateProfileField(e,t):this.isCompatEnabled("INSTANCE_SET")?(this.$set(this.profileFields,t,{...e,errorId:null}),this.$set(this.profileFields,t,{...e,errorValue:null})):(this.profileFields[t]={...e,errorId:null},this.profileFields[t]={...e,errorValue:null}),this.$refs.profileFieldsGrid.currentInlineEditId=e.id,this.$refs.profileFieldsGrid.enableInlineEdit(),this.selectedProfileField={...e}},onDeleteProfileField(e){this.profileFields.splice(e,1)},setNameError(e){return e?null:new w({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"})},setMailError(e){let t=null;return e||(t=new w({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"})),h(e)||(t=new w({code:"INVALID_MAIL"})),t},setIdError(e){let t=null;return e||(t=new w({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"})),/^\d+$/.test(e)||(t=new w({code:"INVALID_PROFILE_FIELD_ID",detail:this.$tc("listrakMailSendAction.profileFieldIdValueInvalid")})),t},setValueError(e){let t=null;return e||(t=new w({code:"c1051bb4-d103-4f74-8988-acbcafc7fdc3"})),t},validateRecipient(e,t){let i=this.setNameError(e.name),n=this.setMailError(e.email);return this.isCompatEnabled("INSTANCE_SET")?this.$set(this.recipients,t,{...e,errorName:i,errorMail:n}):this.recipients[t]={...e,errorName:i,errorMail:n},i||n},validateProfileField(e,t){let i=this.setIdError(e.fieldId),n=this.setValueError(e.fieldValue);return this.isCompatEnabled("INSTANCE_SET")?this.$set(this.profileFields,t,{...e,errorId:i,errorValue:n}):this.profileFields[t]={...e,errorId:i,errorValue:n},i||n},resetError(){this.recipientGridError=null,this.recipients.forEach(e=>{e.errorName=null,e.errorMail=null}),this.profileFieldsGridError=null,this.profileFields.forEach(e=>{e.errorId=null,e.errorValue=null}),this.transactionalMessageIdError=null},allowDeleteRecipient(e){return e!==this.recipients.length-1},allowDeleteProfileField(e){return e!==this.profileFields.length-1}}});let v=Shopware.Classes.ApiService;class I extends v{constructor(e,t,i="listrak-customer-sync"){super(e,t,i)}importCustomers(){let e=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}`,"",{headers:e}).then(e=>v.handleResponse(e))}}let E=Shopware.Classes.ApiService;class A extends E{constructor(e,t,i="listrak-order-sync"){super(e,t,i)}importOrders(){let e=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}`,"",{headers:e}).then(e=>E.handleResponse(e))}}let _=Shopware.Classes.ApiService;class C extends _{constructor(e,t,i="listrak-newsletter-recipient-sync"){super(e,t,i)}importNewsletterRecipients(){let e=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}`,"",{headers:e}).then(e=>_.handleResponse(e))}}let y=Shopware.Classes.ApiService;class k extends y{constructor(e,t,i="listrak-data-api"){super(e,t,i)}check(e){let t=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/test`,e,{headers:t}).then(e=>y.handleResponse(e))}}let M=Shopware.Classes.ApiService;class F extends M{constructor(e,t,i="listrak-email-api"){super(e,t,i)}check(e){let t=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/test`,e,{headers:t}).then(e=>M.handleResponse(e))}}var T=JSON.parse('{"fullCustomerSyncButton":{"buttonLabel":"Vollst\xe4ndige Kundensynchronisierung","title":"Vollst\xe4ndige Kundensynchronisierung","success":"Die Kundensynchronisierung wurde in die Warteschlange gestellt.","error":"Die Kundensynchronisierung ist fehlgeschlagen. Bitte versuchen Sie es erneut."},"fullOrderSyncButton":{"buttonLabel":"Vollst\xe4ndige Auftragssynchronisierung","title":"Vollst\xe4ndige Auftragssynchronisierung","success":"Die Auftragssynchronisierung wurde in die Warteschlange gestellt.","error":"Die Auftragssynchronisierung ist fehlgeschlagen. Bitte versuchen Sie es erneut."},"fullNewsletterRecipientSyncButton":{"buttonLabel":"Vollst\xe4ndige Synchronisierung der Newsletter-Empf\xe4nger","title":"\xe5Vollst\xe4ndige Synchronisierung der Newsletter-Empf\xe4nger","success":"Die Synchronisierung der Newsletter-Empf\xe4nger wurde in die Warteschlange gestellt.","error":"Die Synchronisierung der Newsletter-Empf\xe4nger ist fehlgeschlagen. Bitte versuchen Sie es erneut."},"dataApiTest":{"buttonLabel":"API-Verbindung testen","title":"Datenintegrations-API-Test","success":"Verbindung wurde erfolgreich getestet.","error":"Verbindung konnte nicht hergestellt werden. Bitte pr\xfcfen Sie Ihre Zugangsdaten."},"emailApiTest":{"buttonLabel":"API-Verbindung testen","title":"E-Mail-Integrations-API-Test","success":"Verbindung wurde erfolgreich getestet.","error":"Verbindung konnte nicht hergestellt werden. Bitte pr\xfcfen Sie Ihre Zugangsdaten."},"listrakMailSendAction":{"mailSend":"E-Mail verschicken","columnRecipientName":"Empf\xe4nger-Name","columnRecipientMail":"Empf\xe4nger-E-Mail-Adresse","placeholderRecipientEmailAddress":"E-Mail-Adresse eingeben ...","placeholderRecipientName":"Namen eingeben ...","fieldMailTemplateDetailLink":"E-Mail-Template \xf6ffnen","titleSendMail":"E-Mail senden mit Listrak","labelEmailTemplate":"Template","placeholderEmailTemplate":"E-Mail-Template ausw\xe4hlen ...","titleNewEmailTemplate":"Neues E-Mail-Template","tabGeneral":"Allgemein","tabMailText":"Mail-Text","labelMailType":"Typ","placeholderMailType":"Typ ausw\xe4hlen ...","labelSubject":"Betreff","labelSenderName":"Absender","placeholderSubject":"Thema eingeben ...","placeholderSenderName":"Absendernamen eingeben ...","labelDescription":"Beschreibung","placeholderDescription":"Beschreibung eingeben ...","labelContentPlain":"Klartext","labelContentHtml":"HTML","placeholderPlain":"Klartext-Inhalte eingeben ...","placeholderHtml":"HTML-Inhalte eingeben ...","buttonAddMailTemplate":"E-Mail-Template hinzuf\xfcgen","labelDefault":"Standard","labelCustomer":"Kunde","labelAdmin":"Administrator","labelCustom":"Benutzerdefiniert","labelContactFormMail":"Anfragesteller","labelRecipient":"Empf\xe4nger","placeholderRecipient":"E-Mail-Empf\xe4nger ausw\xe4hlen ...","useDifferentReplyToLabel":"Absender","labelReplyTo":"Benutzerdefinierte Absender-Adresse","placeholderReplyTo":"E-Mail-Adresse eingeben ...","tooltipDifferentReplyTo":"E-Mails werden standardm\xe4\xdfig von der E-Mail-Adresse des Shop-Betreibers versendet. Du kannst die E-Mail-Adresse des Shop-Betreibers in den <a href=\\"{settingsLink}\\">Einstellungen</a> \xe4ndern.","labelLatestDocuments":"Anh\xe4nge","placeholderLatestDocuments":"Dokumente ausw\xe4hlen ...","documentDescription":"Wenn die hier ausgew\xe4hlten Dokumente nicht existieren, k\xf6nnen sie nicht angeh\xe4ngt und versendet werden. Stelle sicher, dass die Dokumente durch eine vorhergehende Aktion erstellt wurden, bevor diese Aktion ausgef\xfchrt wird.","transactionalMessageIdLabel":"Transaktionsnachrichten-ID","transactionalMessageIdHelpText":"Gehen Sie in Listrak Admin zu Hilfe und Support > API-ID-Informationen, um die Transaktionsnachrichten-ID zu finden.","profileFieldsLabel":"Zuordnung von Listrak-Profilfeldern","transactionalMessageIdValueInvalid":"Bitte geben Sie einen g\xfcltigen Wert f\xfcr die Transaktionsnachrichten-ID ein.","profileFieldIdValueInvalid":"Bitte geben Sie einen g\xfcltigen Wert f\xfcr die Profilfeld-ID ein.","columnProfileFieldId":"Feld-ID","columnProfileFieldValue":"Feldwert"}}'),R=JSON.parse('{"fullCustomerSyncButton":{"buttonLabel":"Full Customer Synchronization","title":"Full Customer Synchronization","success":"Customer synchronization has been queued.","error":"Customer synchronization failed. Please try again."},"fullOrderSyncButton":{"buttonLabel":"Full Order Synchronization","title":"Full Order Synchronization","success":"Order synchronization has been queued.","error":"Order synchronization failed. Please try again."},"fullNewsletterRecipientSyncButton":{"buttonLabel":"Full Newsletter Recipient Synchronization","title":"Full Newsletter Recipient Synchronization","success":"Newsletter recipient synchronization has been queued.","error":"Newsletter recipient synchronization failed. Please try again."},"dataApiTest":{"buttonLabel":"Test API connection","title":"Data Integration API Test","success":"Connection was successfully tested","error":"Could not connect. Please check your credentials."},"emailApiTest":{"buttonLabel":"Test API connection","title":"Email Integration API Test","success":"Connection was successfully tested.","error":"Could not connect. Please check your credentials."},"listrakMailSendAction":{"mailSend":"Send email","columnRecipientName":"Recipient name","columnRecipientMail":"Recipient email address","placeholderRecipientEmailAddress":"Enter email address...","placeholderRecipientName":"Enter name...","fieldMailTemplateDetailLink":"Open email template","titleSendMail":"Send email with Listrak","labelEmailTemplate":"Template","placeholderEmailTemplate":"Select email template...","titleNewEmailTemplate":"New email template","tabGeneral":"General","tabMailText":"Mail text","labelMailType":"Type","placeholderMailType":"Select a type...","labelSubject":"Subject","labelSenderName":"Sender name","placeholderSubject":"Enter subject...","placeholderSenderName":"Enter sender name ...","labelDescription":"Description","placeholderDescription":"Enter description...","labelContentPlain":"Plain text","labelContentHtml":"HTML","placeholderPlain":"Enter email template plain text...","placeholderHtml":"Enter email template HTML text...","buttonAddMailTemplate":"Add email template","labelDefault":"Default","labelCustomer":"Customer","labelAdmin":"Admin","labelCustom":"Custom","labelContactFormMail":"Inquirer","labelRecipient":"Recipient","placeholderRecipient":"Select email recipient...","useDifferentReplyToLabel":"Sender","labelReplyTo":"Custom sender address","placeholderReplyTo":"Enter email address...","tooltipDifferentReplyTo":"Emails are sent from the shop owner’s email address by default. You can edit the shop owner’s email address in the <a href=\\"{settingsLink}\\">settings</a>.","labelLatestDocuments":"Attachments","placeholderLatestDocuments":"Select documents...","documentDescription":"If the selected documents do not exist, they cannot be attached and sent. Make sure documents are generated by a preceding action before this action is executed.","transactionalMessageIdLabel":"Transactional Message ID","transactionalMessageIdHelpText":"In Listrak Admin go to Help & Support > API ID Information to find the Transactional Message ID.","profileFieldsLabel":"Listrak Profile Fields\' Mapping","profileFieldsFormatInvalid":"Please enter a valid format for the profile fields.","transactionalMessageIdValueInvalid":"Please enter a valid value for the Transactional Message ID.","profileFieldIdValueInvalid":"Please enter a valid value for the Profile Field ID.","columnProfileFieldId":"Field ID","columnProfileFieldValue":"Field Value"}}');Shopware.Service().register("dataApiTest",()=>new k(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService"))),Shopware.Service().register("emailApiTest",()=>new F(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService"))),Shopware.Service().register("fullCustomerSync",()=>new I(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService"))),Shopware.Service().register("fullOrderSync",()=>new A(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService"))),Shopware.Service().register("fullNewsletterRecipientSync",()=>new C(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService"))),Shopware.Locale.extend("de-DE",T),Shopware.Locale.extend("en-GB",R)}()}();